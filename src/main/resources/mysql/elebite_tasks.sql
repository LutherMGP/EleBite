CREATE DATABASE  IF NOT EXISTS `elebite` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `elebite`;
-- MySQL dump 10.13  Distrib 8.0.29, for macos12 (x86_64)
--
-- Host: localhost    Database: elebite
-- ------------------------------------------------------
-- Server version	8.0.32

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `tasks`
--

DROP TABLE IF EXISTS `tasks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tasks` (
  `taskid` bigint NOT NULL AUTO_INCREMENT,
  `task_created_date_time` datetime(6) DEFAULT NULL,
  `task_creator` varchar(255) DEFAULT NULL,
  `task_description` mediumtext,
  `task_end_date` date DEFAULT NULL,
  `task_estimated_hours` double DEFAULT NULL,
  `task_name` varchar(255) DEFAULT NULL,
  `task_start_date` date DEFAULT NULL,
  `task_status` varchar(255) DEFAULT NULL,
  `task_team_id` bigint DEFAULT NULL,
  `task_updated_creator` varchar(255) DEFAULT NULL,
  `task_updated_date_time` datetime(6) DEFAULT NULL,
  `project_id` bigint NOT NULL,
  PRIMARY KEY (`taskid`),
  KEY `FKsfhn82y57i3k9uxww1s007acc` (`project_id`),
  CONSTRAINT `FKsfhn82y57i3k9uxww1s007acc` FOREIGN KEY (`project_id`) REFERENCES `projects` (`projectid`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tasks`
--

LOCK TABLES `tasks` WRITE;
/*!40000 ALTER TABLE `tasks` DISABLE KEYS */;
INSERT INTO `tasks` VALUES (2,'2023-05-30 10:59:36.520242',NULL,'Priority: High\r\n\r\nBeskrivelse:\r\n\r\n**Del 1: Oprettelse af Projekt**\r\n\r\n1. **Backend**: I din Spring Boot applikation, opret en ny klasse med navnet \"Project\". Denne klasse skal have følgende felter: \'id\', \'name\', \'description\', \'startDate\', \'endDate\'. \'id\' skal være en unik identifikator, hvilket typisk vil være en Long eller String i Java. Brug annoteringer fra JPA (Java Persistence API) for at gøre klassen til en entitet, der kan gemmes i databasen. \r\n\r\n2. **Frontend**: Lav en formular i brugergrænsefladen, hvor brugerne kan indtaste projektnavn, beskrivelse, startdato og slutdato. Ved indsendelse skal formularen sende en POST-anmodning til backenden med de indtastede oplysninger. \r\n\r\n**Del 2: Oprettelse af Opgave**\r\n\r\n1. **Backend**: Opret en ny klasse med navnet \"Task\". Denne klasse skal have følgende felter: \'id\', \'name\', \'description\', \'responsibleTeam\'. \'id\' skal være en unik identifikator, og \'responsibleTeam\' er et felt, der repræsenterer det team, der er ansvarligt for opgaven. Du skal også tilføje et felt \'projectId\' for at knytte opgaven til et specifikt projekt. \r\n\r\n2. **Frontend**: Lav en formular i brugergrænsefladen, hvor brugere kan indtaste opgavenavn, beskrivelse og ansvarligt teamnummer. Ved indsendelse skal formularen sende en POST-anmodning til backenden med de indtastede oplysninger og projektets ID.\r\n\r\nFor begge dele, husk at tilføje relevante HTTP-endpoints i din Spring Controller for at håndtere POST-anmodningerne. Du skal også sikre dig, at der er passende validering på både frontend og backend for at sikre, at data er korrekt og fuldstændig, før den gemmes i databasen. Endelig, for at fuldføre CRUD-funktionaliteterne, skal du også implementere relevante GET-, PUT-, og DELETE-metoder i din Controller for at hente, opdatere og slette projekter og opgaver.\r\n\r\nAcceptkriterier:\r\n\r\n•	Brugeren skal kunne oprette et nyt projekt ved at angive projektets navn, beskrivelse, start- og slutdato.\r\n•	Når et projekt oprettes, skal det have en unik identifikator (ID).\r\n•	Brugeren skal kunne tilføje opgaver til et projekt ved at angive opgavens navn, beskrivelse og ansvarligt teamnummer.\r\n•	Når en opgave tilføjes til et projekt, skal den være knyttet til det relevante projekt via projektets ID.\r\n','2023-05-14',60,'Sprint 1 / US007: Projekt & Task oprettelse','2023-05-01','Done',1,NULL,'2023-05-30 22:00:05.167457',1),(3,'2023-05-30 22:03:05.584233',NULL,'Priority: High\r\n\r\nBeskrivelse:\r\nProjektoversigt: Skab en side der viser en liste over alle projekter i systemet. Denne side skal hente projektdata fra backenden via en REST API-kald.\r\n\r\nStatusopdatering: For hvert projekt, der er vist i listen, skal brugeren have mulighed for at se og opdatere status for hver opgave tilknyttet projektet. Dette skal være muligt ved at klikke på en opgave, hvorefter der vises en dropdown-menu med mulighederne \"Fuldført\", \"I arbejde\" eller \"Blokeret\".\r\n\r\nRedigeringsfunktion: Når en bruger vælger en ny status fra dropdown-menuen, skal der være en \"Gem\" knap, der tillader brugeren at sende denne opdatering til backenden via et POST eller PUT API-kald.\r\n\r\nBackend-opgaver:\r\n\r\nREST API: Implementer en GET API-endpoint der returnerer en liste over alle projekter og deres tilknyttede opgaver.\r\n\r\nStatusopdatering: Implementer en POST eller PUT API-endpoint, der tager en opgave-ID og den nye status som input. Denne endpoint skal opdatere den tilsvarende opgave i databasen med den nye status.\r\n\r\nDatabasestyring: Sørg for at din database kan håndtere de nødvendige CRUD-operationer (Create, Read, Update, Delete) for denne funktionalitet. Overvej at bruge JPA (Java Persistence API) eller Spring Data JPA for at håndtere databasetransaktioner.\r\n\r\nAcceptkriterier:\r\n\r\n•	Brugeren skal kunne se en liste over alle projekter i systemet.\r\n•	Brugeren skal kunne kommentere en opgave som \"Fuldført\", \"I arbejde\" eller \"Blokeret\".\r\n•	Brugeren skal kunne redigere status for en opgave og opdatere den efter behov.\r\n','2023-05-14',45,'Sprint 1 / US019: Mulighed for at spore og opdatere opgave status','2023-05-01','Done',1,NULL,'2023-05-30 22:08:09.201852',1),(4,'2023-05-30 22:13:35.322965',NULL,'Priority: High\r\n\r\nBeskrivelse:\r\n\r\nInputformular for Projektvision: Du skal designe en formular, der giver brugere mulighed for at indtaste en projektvision. Denne formular skal være enkel og brugervenlig, og den skal indeholde validering for at sikre, at visionen er klar og præcis.\r\n\r\nGemme Projektvision: Du skal implementere backend-logik til at gemme den indtastede projektvision i databasen. Du skal sikre, at alle nødvendige data er gemt korrekt, og at databasen er opdateret med den nyeste version af projektvisionen.\r\n\r\nDele Projektvision: Du skal implementere en funktionalitet, der gør det muligt for projektvisionen at blive delt med andre interessenter og teammedlemmer. Dette kan være gennem en visningsfunktion på en brugerprofil, eller gennem en funktion, der tillader brugeren at sende projektvisionen via e-mail eller anden kommunikationskanal.\r\n\r\nRedigere Projektvision: Du skal sikre, at projektejeren har mulighed for at redigere projektvisionen efter behov. Dette kan gøres gennem en \"rediger\" knap eller lignende, der tager brugeren til formularen for at redigere projektvisionen, med den aktuelle tekst forudfyldt.\r\n\r\nAcceptkriterier:\r\n\r\n•	Brugeren skal kunne angive og gemme en klar og præcis vision for projektet.\r\n•	Den definerede projektvision skal kunne deles med andre interessenter og teammedlemmer.\r\n•	Projektejeren skal kunne redigere projektvisionen efter behov.\r\n','2023-05-21',30,'Sprint 2 / US001: Mulighed for at definere projektvision','2023-05-15','Done',1,NULL,'2023-05-30 22:28:26.863251',1),(5,'2023-05-30 22:14:51.980479',NULL,'Priority: High\r\n\r\nBeskrivelse:\r\n\r\nBackend-opgaver\r\nModeller og databasestruktur: Start med at oprette de nødvendige databasemodeller. Dette vil sandsynligvis inkludere en Project-model med felter som name, vision, start_date, end_date osv., en Task-model med felter som name, start_date, end_date, status, assigned_to osv., og en Resource-model med felter som name, quantity, task_id osv.\r\n\r\nAPI endpoints: Opret RESTful API-endpoints, der håndterer CRUD-operationer (Create, Read, Update, Delete) for projekter, opgaver og ressourcer. Disse endpoints bør være beskyttet med passende autorisation for at sikre, at kun autoriserede brugere kan foretage ændringer.\r\n\r\nBusiness logik: Implementer forretningslogikken for at håndtere oprettelse og administration af en projektplan. Dette vil sandsynligvis involvere validering af input, tilknytning af opgaver til projekter, tilknytning af ressourcer til opgaver, tildeling af opgaver til ansvarlige personer, og justering af ressourcer.\r\n\r\nFrontend-opgaver\r\nUI design: Design et brugervenligt interface, der gør det let for brugere at oprette og administrere en projektplan. Dette skal omfatte formularer til at oprette og redigere projekter, opgaver og ressourcer, samt visning af projektplanen.\r\n\r\nIntegration med API: Brug passende teknikker til at integrere frontend med backend API\'erne. Dette vil involvere at lave HTTP-anmodninger til API\'erne og håndtere respons.\r\n\r\nTilpasning af ressourcer: Implementer funktionalitet, der gør det muligt for brugeren at tildele og justere ressourcer. Dette vil sandsynligvis involvere at bruge drag-and-drop teknikker og interaktive elementer.\r\n\r\nInteressent- og teammedlemmer-synlighed: Sikre, at projektplanen er synlig for alle relevante interessenter og teammedlemmer. Dette kan involvere at implementere forskellige adgangsniveauer eller roller, der bestemmer, hvem der kan se og redigere projektplanen.\r\n\r\nAcceptkriterier:\r\n\r\n•	Brugeren skal kunne oprette og administrere en projektplan med specifikke aktiviteter og tidsrammer.\r\n•	Planen skal indeholde opgaver, der er tilknyttet tilhørende ressourcer og ansvarlige personer.\r\n•	Brugeren skal kunne tildele og justere ressourcer for at sikre en effektiv planlægning.\r\n•	Projektplanen skal være synlig for alle relevante interessenter og teammedlemmer.\r\n','2023-05-21',20,'Sprint 2 / US010: Mulighed for at planlægge opgaver','2023-05-15','Incomplete',1,NULL,'2023-05-31 07:59:42.020393',1),(6,'2023-05-30 22:27:44.438211',NULL,'Priority: Medium\r\n\r\nBeskrivelse:\r\n\r\nFrontend opgaver:\r\nDesign og Implementering af brugergrænseflade: Designe og implementere brugergrænsefladen for at vise oversigten over projektfremskridt. Dette skulle inkludere visning af projektets navn, beskrivelse, og aktuelle status.\r\n\r\nIntegration med backend API\'er: Integrere brugergrænsefladen med de nye backend API\'er for at hente og opdatere projektfremskridt data. Dette vil inkludere håndtering af forskellige API svar og eventuelle fejl.\r\n\r\nUser Experience og Accessibility checks: Kontroller at brugergrænsefladen er brugervenlig og tilgængelig for alle brugere.\r\n\r\nFrontend tests: Skriv tests for dine frontend komponenter, herunder enhedstests og end-to-end tests.\r\n\r\nBackend opgaver:\r\nDesign og Implementering af API\'er: Udvikle REST API\'er ved hjælp af Spring Boot for at håndtere hentning og opdatering af projektfremskridt data. Dette kunne inkludere API\'er for at hente alle projekter, få detaljeret information om et specifikt projekt, og opdatere status for et projekt.\r\n\r\nDatabase design: Designe og implementere de nødvendige database tabeller, der vil opbevare information om projekterne. Dette vil sandsynligvis involvere oprettelse af nye tabeller, såvel som opdatering af eksisterende tabeller, for at tilføje de nødvendige relationer.\r\n\r\nUnit tests: Skriv unit tests for at sikre at dine API\'er og andre backend komponenter fungerer korrekt.\r\n\r\nAcceptkriterier:\r\n\r\n•	Brugeren skal kunne få en oversigt over projektets aktuelle status og fremskridt.','2023-05-21',40,'Sprint 2 / US015: Mulighed for at planlægge opgaver','2023-05-15','Incomplete',1,NULL,'2023-05-30 22:27:44.438555',1),(7,'2023-05-30 22:35:07.204083',NULL,'Priority: High\r\n\r\nBeskrivelse:\r\nImplementer adgangskontrolmekanismer: Du skal sikre, at kun autoriserede brugere har adgang til vores system. For at opnå dette, vil du implementere en rollebaseret adgangskontrol (RBAC). Spring Security kan hjælpe med dette. Du skal konfigurere de forskellige roller og deres rettigheder i systemet. For eksempel kan roller være \'admin\', \'bruger\', \'gæst\', etc., og hver rolle vil have forskellige rettigheder.\r\n\r\nKrypter kommunikationen: For at beskytte data mod uautoriseret adgang, skal al kommunikation mellem systemet og brugerne være krypteret. Til dette formål skal du konfigurere vores server til at bruge HTTPS i stedet for HTTP. Du kan bruge et selvsigneret certifikat til udvikling, men husk, at du vil skulle bruge et officielt certifikat til produktionsmiljøet.\r\n\r\nEtabler brugerautentificering: Du skal også etablere sikre mekanismer til autentificering af brugere. Dette kan opnås ved at bruge Spring Security\'s indbyggede mekanismer til autentificering og sessionhåndtering. Autentificering skal omfatte en form for brugervalidering, typisk via brugernavn og adgangskode. Derudover skal du også implementere passende sikkerhedsforanstaltninger, såsom hashing af adgangskoder, før de gemmes i databasen.\r\n\r\nAcceptkriterier:\r\n•	Systemet skal have implementeret passende adgangskontrolmekanismer, der sikrer, at kun autoriserede brugere har adgang til systemet.\r\n•	Kommunikation mellem systemet og brugere skal være krypteret for at beskytte data mod uautoriseret adgang.\r\n•	Der skal være etableret mekanismer til autentificering af brugere, f.eks. brug af brugernavn og adgangskode eller andre sikre metoder.\r\n','2023-05-28',60,'Sprint 3 / US025: Implementering af sikkerhedsforanstaltninger','2023-05-22','Incomplete',1,NULL,'2023-05-30 22:35:07.204623',1),(8,'2023-05-31 08:01:17.764162',NULL,'',NULL,NULL,'US002: Prioritering af krav',NULL,'',NULL,NULL,'2023-05-31 08:02:13.513622',3),(9,'2023-05-31 08:02:39.498125',NULL,'',NULL,NULL,'US003: Estimering',NULL,'',NULL,NULL,'2023-05-31 08:02:39.498288',3),(10,'2023-05-31 08:03:02.840718',NULL,'',NULL,NULL,'US004: Sprint Review',NULL,'',NULL,NULL,'2023-05-31 08:03:02.841438',3),(11,'2023-05-31 08:03:20.960236',NULL,'',NULL,NULL,'US005: Interaktion med interessenter',NULL,'',NULL,NULL,'2023-05-31 08:03:20.960482',3),(12,'2023-05-31 08:03:46.272385',NULL,'',NULL,NULL,'US006: Kontinuerlig forbedring',NULL,'',NULL,NULL,'2023-05-31 08:03:46.272642',3),(13,'2023-05-31 08:04:12.200128',NULL,'',NULL,NULL,'US008: Overvågning af projektets fremskridt',NULL,'',NULL,NULL,'2023-05-31 08:04:12.200652',3),(14,'2023-05-31 08:04:32.127607',NULL,'',NULL,NULL,'US009: Prioritering af krav',NULL,'',NULL,NULL,'2023-05-31 08:04:32.127960',3),(15,'2023-05-31 08:05:15.510409',NULL,'',NULL,NULL,'US011: Testing',NULL,'',NULL,NULL,'2023-05-31 08:05:15.510594',3),(16,'2023-05-31 08:06:02.016237',NULL,'',NULL,NULL,'US012: Interaktion med i Team',NULL,'',NULL,NULL,'2023-05-31 08:06:02.016452',3),(17,'2023-05-31 08:06:24.858516',NULL,'',NULL,NULL,'US013: Kontinuerlig forbedring',NULL,'',NULL,NULL,'2023-05-31 08:06:24.860277',3),(18,'2023-05-31 08:06:46.149087',NULL,'',NULL,NULL,'US014: Produktudgivelser',NULL,'',NULL,NULL,'2023-05-31 08:06:46.149320',3),(19,'2023-05-31 08:07:09.048245',NULL,'',NULL,NULL,'US016: Adgang til detaljerede kravspecifikationer',NULL,'',NULL,NULL,'2023-05-31 08:07:41.127002',3),(20,'2023-05-31 08:08:25.956801',NULL,'',NULL,NULL,'US017: Mulighed for at prioritere opgaver',NULL,'',NULL,NULL,'2023-05-31 08:08:25.957034',3),(21,'2023-05-31 08:08:45.308968',NULL,'',NULL,NULL,'US018: Adgang til projektressourcer',NULL,'',NULL,NULL,'2023-05-31 08:08:45.311127',3),(22,'2023-05-31 08:09:07.164002',NULL,'',NULL,NULL,'US020: Mulighed for at kommentere og diskutere opgaver',NULL,'',NULL,NULL,'2023-05-31 08:09:07.164431',3),(23,'2023-05-31 08:09:30.422422',NULL,'',NULL,NULL,'US021: Mulighed for at tilknytte kodeændringer til specifikke opgaver',NULL,'',NULL,NULL,'2023-05-31 08:09:30.422650',3),(24,'2023-05-31 08:09:53.385293',NULL,'',NULL,NULL,'US022: Adgang til teknisk dokumentation og support',NULL,'',NULL,NULL,'2023-05-31 08:09:53.385719',3),(25,'2023-05-31 08:10:11.785119',NULL,'',NULL,NULL,'US023: Mulighed for at estimere opgaver',NULL,'',NULL,NULL,'2023-05-31 08:10:11.785377',3),(26,'2023-05-31 08:10:31.381773',NULL,'',NULL,NULL,'US024: Adgang til sprint backlog',NULL,'',NULL,NULL,'2023-05-31 08:10:31.382114',3);
/*!40000 ALTER TABLE `tasks` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-05-31  8:43:04
